[{"/Users/recro/Documents/code/code/portfolioFrontend/src/index.js":"1","/Users/recro/Documents/code/code/portfolioFrontend/src/App.js":"2","/Users/recro/Documents/code/code/portfolioFrontend/src/reportWebVitals.js":"3","/Users/recro/Documents/code/code/portfolioFrontend/src/components/Navigationbar.js":"4","/Users/recro/Documents/code/code/portfolioFrontend/src/components/Warehouse.js":"5","/Users/recro/Documents/code/code/portfolioFrontend/src/components/Login.js":"6","/Users/recro/Documents/code/code/portfolioFrontend/src/components/Area1.js":"7","/Users/recro/Documents/code/code/portfolioFrontend/src/components/Signup.js":"8","/Users/recro/Documents/code/code/portfolioFrontend/src/components/WriteComponent.js":"9","/Users/recro/Documents/code/code/portfolioFrontend/src/components/StockSuggestionsComponent.js":"10","/Users/recro/Documents/code/code/portfolioFrontend/src/components/NewsContainer.js":"11","/Users/recro/Documents/code/code/portfolioFrontend/src/components/SSOCallback.js":"12","/Users/recro/Documents/code/code/portfolioFrontend/src/components/InstagramImageFetcher.js":"13","/Users/recro/Documents/code/code/portfolioFrontend/src/redux/store.js":"14","/Users/recro/Documents/code/code/portfolioFrontend/src/redux/actions.js":"15","/Users/recro/Documents/code/code/portfolioFrontend/src/config.js":"16","/Users/recro/Documents/code/code/portfolioFrontend/src/components/SSOLogin.js":"17","/Users/recro/Documents/code/code/portfolioFrontend/src/redux/reducer.js":"18","/Users/recro/Documents/code/code/portfolioFrontend/src/components/forms/LoginForm.js":"19","/Users/recro/Documents/code/code/portfolioFrontend/src/components/forms/SignupForm.js":"20","/Users/recro/Documents/code/code/portfolioFrontend/src/services/workos.js":"21","/Users/recro/Documents/code/code/portfolioFrontend/src/components/card/progress.js":"22","/Users/recro/Documents/code/code/portfolioFrontend/src/redux/actionTypes.js":"23"},{"size":524,"mtime":1752173578567,"results":"24","hashOfConfig":"25"},{"size":2388,"mtime":1751726017318,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":1751725308395,"results":"28","hashOfConfig":"27"},{"size":14758,"mtime":1752174495359,"results":"29","hashOfConfig":"27"},{"size":3634,"mtime":1752173913747,"results":"30","hashOfConfig":"27"},{"size":1682,"mtime":1751726036012,"results":"31","hashOfConfig":"27"},{"size":8446,"mtime":1751725308393,"results":"32","hashOfConfig":"27"},{"size":478,"mtime":1751725308393,"results":"33","hashOfConfig":"27"},{"size":2217,"mtime":1752173890019,"results":"34","hashOfConfig":"27"},{"size":2709,"mtime":1752173870849,"results":"35","hashOfConfig":"27"},{"size":16433,"mtime":1752173685733,"results":"36","hashOfConfig":"27"},{"size":2206,"mtime":1752173951059,"results":"37","hashOfConfig":"27"},{"size":5781,"mtime":1752173845375,"results":"38","hashOfConfig":"27"},{"size":307,"mtime":1751725308395,"results":"39","hashOfConfig":"27"},{"size":322,"mtime":1751725308394,"results":"40","hashOfConfig":"27"},{"size":286,"mtime":1751725308394,"results":"41","hashOfConfig":"27"},{"size":2109,"mtime":1752173933476,"results":"42","hashOfConfig":"27"},{"size":841,"mtime":1751725308394,"results":"43","hashOfConfig":"27"},{"size":3749,"mtime":1752173746242,"results":"44","hashOfConfig":"27"},{"size":6247,"mtime":1752173778667,"results":"45","hashOfConfig":"27"},{"size":968,"mtime":1752172560158,"results":"46","hashOfConfig":"27"},{"size":974,"mtime":1752173702119,"results":"47","hashOfConfig":"27"},{"size":366,"mtime":1751725308394,"results":"48","hashOfConfig":"27"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10kcfp3",{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ekpm8t",{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/recro/Documents/code/code/portfolioFrontend/src/index.js",[],"/Users/recro/Documents/code/code/portfolioFrontend/src/App.js",[],"/Users/recro/Documents/code/code/portfolioFrontend/src/reportWebVitals.js",[],"/Users/recro/Documents/code/code/portfolioFrontend/src/components/Navigationbar.js",[],"/Users/recro/Documents/code/code/portfolioFrontend/src/components/Warehouse.js",["102","103","104","105","106"],"import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport axios from \"axios\";\nimport { useFormik } from \"formik\";\nimport { URL } from \"../config\";\nimport reactGa from \"react-ga\";\n\nexport function Warehouse(props) {\n  const [testData, setTestData] = useState([]);\n  const [stateToken, setStateToken] = useState(\"\");\n\n  useEffect(() => {\n    const authToken = localStorage.getItem(\"token\");\n    setStateToken(authToken);\n    reactGa.initialize(\"UA-92548969-2\");\n    reactGa.pageview(\"/warehouse\");\n  }, []);\n\n  const fetchData = () => {\n    const authToken = localStorage.getItem(\"token\");\n    setStateToken(authToken);\n    axios({\n      method: \"post\",\n      url: URL + \"user/getdata\",\n      data: { token: authToken },\n    })\n      .then((res) => {\n        setTestData(res.data);\n      })\n      .catch((err) => {\n        console.log(\"error returned at fetchData: \" + err);\n      });\n  };\n  const auth = useSelector((state) => state.auth);\n  if (auth.isLoggedIn) {\n    var userId = auth.user.id;\n  }\n\n  var [saveSuccess, setSaveSuccess] = useState(false);\n  const [savedData, setSavedData] = useState(testData);\n  const formik = useFormik({\n    initialValues: {\n      data: \"\",\n    },\n    onSubmit: (values) => {\n      axios\n        .post(`${URL}user/save`, { token: stateToken, data: values })\n        .then((res) => {\n          //USERCREATED SUCCESS\n          if (res.data.code === \"dataSaved\") {\n            setSaveSuccess(true);\n            alert(\"Data saved successfully\");\n          }\n\n          console.log(res);\n          // console.log(res.data);\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n      // alert(JSON.stringify(values));\n    },\n  });\n\n  return (\n    <div className=\"warehouse-main\">\n      <div className=\"dataForm\">\n        <h2 className=\"text-2xl font-bold text-white mb-6\">HTTP Logger</h2>\n        <form className=\"data-form\" onSubmit={formik.handleSubmit}>\n          <div className=\"mb-6\">\n            <label className=\"block text-sm font-medium text-text-secondary mb-2\">\n              Anything you want to save\n            </label>\n            <input\n              type=\"text\"\n              name=\"data\"\n              className=\"input-glass w-full\"\n              placeholder=\"Enter data\"\n              onChange={formik.handleChange}\n              value={formik.values.data}\n            />\n          </div>\n          <button type=\"submit\" className=\"btn-primary-glass\">\n            Submit Data\n          </button>\n        </form>\n      </div>\n      <div className=\"data-api\">\n        <p className=\"text-text-secondary mb-4\">\n          You can also log your data from your application. Api details are\n          given below\n        </p>\n        <code className=\"text-primary-light block mb-2\">Link: {URL}user/save</code>\n        <br />\n        <code className=\"text-primary-light block\">\n          Request method: POST, Object:\n          {`{\"token\":\"` +\n            stateToken +\n            `\"\n                \"data\": {\n                  <YOUR JSON DATA>\n                }\n            }`}\n        </code>\n      </div>\n      <div className=\"dataFormUpper\" style={{ marginTop: \"150px\" }}>\n        <h2 className=\"text-2xl font-bold text-white mb-6\">Your saved data</h2>\n        <button className=\"btn-primary-glass mb-8\" onClick={() => fetchData()}>\n          Fetch Data\n        </button>\n        <ol>\n          {testData\n            .slice(0)\n            .reverse()\n            .map((data) => {\n              return <li>{JSON.stringify(data.data.data)}</li>;\n            })}\n        </ol>\n      </div>\n    </div>\n  );\n}\n","/Users/recro/Documents/code/code/portfolioFrontend/src/components/Login.js",["107","108","109"],"import React, { useEffect, useState } from \"react\";\nimport { Loginform } from \"./forms/LoginForm\";\nimport { SSOLogin } from \"./SSOLogin\";\nimport { delAuth, initAuth } from \"../redux/actions\";\nimport axios from \"axios\";\nimport { useDispatch } from \"react-redux\";\n\nexport function Login(props) {\n  const [isValidToken, setIsValidToken] = useState(null);\n  const dispatch = useDispatch();\n\n  const removeToken = () => {\n    localStorage.setItem(\"token\", null);\n    setIsValidToken(null);\n    dispatch(delAuth());\n  };\n\n  if (!isValidToken) {\n    return (\n      <div\n        style={{\n          background: \"linear-gradient(#112233, #002222)\",\n          color: \"white\",\n          textAlign: \"center\",\n          height: \"93vh\",\n        }}\n      >\n        <div style={{ paddingTop: \"10vh\" }}></div>\n        <div style={{ marginBottom: \"2rem\" }}>\n          <SSOLogin />\n        </div>\n        <div style={{ margin: \"2rem 0\", textAlign: \"center\" }}>\n          <hr style={{ width: \"50%\", margin: \"0 auto\" }} />\n          <span style={{ padding: \"0 1rem\", background: \"linear-gradient(#112233, #002222)\" }}>\n            OR\n          </span>\n          <hr style={{ width: \"50%\", margin: \"0 auto\" }} />\n        </div>\n        <Loginform />\n      </div>\n    );\n  } else {\n    return (\n      <div\n        style={{\n          background: \"linear-gradient(#112233, #002222)\",\n          color: \"white\",\n          textAlign: \"center\",\n          height: \"93vh\",\n        }}\n      >\n        <div style={{ paddingTop: \"10vh\" }}></div>\n        <h2>Hi, {isValidToken.message.name}</h2>\n        <h2>You are already loggedin</h2>\n        <button onClick={removeToken}>Logout</button>\n      </div>\n    );\n  }\n}\n","/Users/recro/Documents/code/code/portfolioFrontend/src/components/Area1.js",["110"],"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Typewriter } from \"react-typewriting-effect\";\nimport \"react-typewriting-effect/dist/index.css\";\nimport gitLogo from \"./../assets/github.svg\";\nimport linkedinLogo from \"./../assets/linkedin-logo.svg\";\n\nexport function Area1(props) {\n  const [isHidden, setisHidden] = useState(true);\n  const onFirstlineComplete = () => {\n    setisHidden(false);\n  };\n\n  return (\n    <div className=\"body-backgroud\">\n      <div className=\"home-upper\">\n        <div className=\"Area1\">\n          <div>\n            <Typewriter\n              string=\"Hi, I am Sayantan Mishra\"\n              delay={80}\n              stopBlinkinOnComplete\n              onComplete={onFirstlineComplete}\n              className=\"typeWritter\"\n            />\n          </div>\n          {isHidden ? null : <Writer2 />}\n        </div>\n        <div className=\"home-social-links\">\n          <a href=\"https://github.com/sayanmdn\" className=\"social-link\">\n            <img src={gitLogo} className=\"social-icon\" alt=\"GitHub\" />\n          </a>\n          <a href=\"https://www.linkedin.com/in/sayanmdn/\" className=\"social-link\">\n            <img src={linkedinLogo} className=\"social-icon\" alt=\"LinkedIn\" />\n          </a>\n        </div>\n      </div>\n      \n      {/* About Section */}\n      <div className=\"about-section\">\n        <div className=\"glass-card\">\n          <h3>About Me</h3>\n          <p>\n            Passionate Full Stack Developer with expertise in modern web technologies. \n            I love creating innovative solutions and building applications that make a difference.\n          </p>\n        </div>\n      </div>\n\n      {/* Skills Section */}\n      <div className=\"skills-section\">\n        <h3>Technologies I Work With</h3>\n        \n        <div className=\"tech-category\">\n          <h4>Programming Languages</h4>\n          <div className=\"skills-grid\">\n            <div className=\"skill-card glass\">\n              <div className=\"skill-icon\">🔷</div>\n              <span>TypeScript</span>\n            </div>\n            <div className=\"skill-card glass\">\n              <div className=\"skill-icon\">☕</div>\n              <span>Java</span>\n            </div>\n            <div className=\"skill-card glass\">\n              <div className=\"skill-icon\">🟨</div>\n              <span>JavaScript</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"tech-category\">\n          <h4>Databases</h4>\n          <div className=\"skills-grid\">\n            <div className=\"skill-card glass\">\n              <div className=\"skill-icon\">🐬</div>\n              <span>MySQL</span>\n            </div>\n            <div className=\"skill-card glass\">\n              <div className=\"skill-icon\">🍃</div>\n              <span>MongoDB</span>\n            </div>\n            <div className=\"skill-card glass\">\n              <div className=\"skill-icon\">🐘</div>\n              <span>PostgreSQL</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"tech-category\">\n          <h4>Web Frameworks</h4>\n          <div className=\"skills-grid\">\n            <div className=\"skill-card glass\">\n              <div className=\"skill-icon\">🚀</div>\n              <span>Express.js</span>\n            </div>\n            <div className=\"skill-card glass\">\n              <div className=\"skill-icon\">🌱</div>\n              <span>Spring Boot</span>\n            </div>\n            <div className=\"skill-card glass\">\n              <div className=\"skill-icon\">🌐</div>\n              <span>Apollo GraphQL</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"tech-category\">\n          <h4>Frontend Technologies</h4>\n          <div className=\"skills-grid\">\n            <div className=\"skill-card glass\">\n              <div className=\"skill-icon\">⚛️</div>\n              <span>React.js</span>\n            </div>\n            <div className=\"skill-card glass\">\n              <div className=\"skill-icon\">🔄</div>\n              <span>Redux</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"tech-category\">\n          <h4>Cloud Services</h4>\n          <div className=\"skills-grid\">\n            <div className=\"skill-card glass\">\n              <div className=\"skill-icon\">☁️</div>\n              <span>AWS EC2</span>\n            </div>\n            <div className=\"skill-card glass\">\n              <div className=\"skill-icon\">🗄️</div>\n              <span>RDS</span>\n            </div>\n            <div className=\"skill-card glass\">\n              <div className=\"skill-icon\">📦</div>\n              <span>S3</span>\n            </div>\n            <div className=\"skill-card glass\">\n              <div className=\"skill-icon\">⚡</div>\n              <span>Lambda</span>\n            </div>\n            <div className=\"skill-card glass\">\n              <div className=\"skill-icon\">🐳</div>\n              <span>ECS</span>\n            </div>\n            <div className=\"skill-card glass\">\n              <div className=\"skill-icon\">🔗</div>\n              <span>EventBridge</span>\n            </div>\n            <div className=\"skill-card glass\">\n              <div className=\"skill-icon\">🏗️</div>\n              <span>Terraform</span>\n            </div>\n            <div className=\"skill-card glass\">\n              <div className=\"skill-icon\">🔧</div>\n              <span>Terragrunt</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"tech-category\">\n          <h4>Testing Frameworks</h4>\n          <div className=\"skills-grid\">\n            <div className=\"skill-card glass\">\n              <div className=\"skill-icon\">🃏</div>\n              <span>Jest</span>\n            </div>\n            <div className=\"skill-card glass\">\n              <div className=\"skill-icon\">☕</div>\n              <span>Mocha</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Access Section */}\n      <div className=\"quick-access-section\">\n        <h3>Quick Access</h3>\n        <div className=\"quick-access-grid\">\n          <a href=\"/news\" className=\"quick-card glass\">\n            <div className=\"quick-icon\">📰</div>\n            <h4>Latest News</h4>\n            <p>Get condensed news summaries</p>\n          </a>\n          <a href=\"/stocks\" className=\"quick-card glass\">\n            <div className=\"quick-icon\">📈</div>\n            <h4>Stock Insights</h4>\n            <p>Smart investment suggestions</p>\n          </a>\n          <a href=\"/warehouse\" className=\"quick-card glass\">\n            <div className=\"quick-icon\">📊</div>\n            <h4>Data Warehouse</h4>\n            <p>HTTP request logging tool</p>\n          </a>\n        </div>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"footer-section\">\n        <div className=\"footer-content glass\">\n          <div className=\"footer-links\">\n            <div className=\"footer-column\">\n              <h5>Quick Links</h5>\n              <ul>\n                <li><a href=\"/\">Home</a></li>\n                <li><a href=\"/news\">News</a></li>\n                <li><a href=\"/stocks\">Stock Insights</a></li>\n                <li><a href=\"/warehouse\">Data Warehouse</a></li>\n              </ul>\n            </div>\n            <div className=\"footer-column\">\n              <h5>Connect</h5>\n              <ul>\n                <li><a href=\"https://github.com/sayanmdn\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a></li>\n                <li><a href=\"https://www.linkedin.com/in/sayanmdn/\" target=\"_blank\" rel=\"noopener noreferrer\">LinkedIn</a></li>\n              </ul>\n            </div>\n            <div className=\"footer-column\">\n              <h5>Technologies</h5>\n              <ul>\n                <li>Full Stack Development</li>\n                <li>Cloud Architecture</li>\n                <li>DevOps & CI/CD</li>\n                <li>Modern Web Apps</li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"footer-divider\"></div>\n          <div className=\"footer-bottom\">\n            <p>&copy; 2025 Sayantan Mishra. All rights reserved.</p>\n            <p className=\"footer-love\">Developed with ❤️ by ME</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport function Writer2(props) {\n  return (\n    <div>\n      <Typewriter\n        string=\"Full Stack Developer\"\n        delay={30}\n        stopBlinkinOnComplete\n      />\n    </div>\n  );\n}\n","/Users/recro/Documents/code/code/portfolioFrontend/src/components/Signup.js",[],"/Users/recro/Documents/code/code/portfolioFrontend/src/components/WriteComponent.js",[],"/Users/recro/Documents/code/code/portfolioFrontend/src/components/StockSuggestionsComponent.js",[],"/Users/recro/Documents/code/code/portfolioFrontend/src/components/NewsContainer.js",["111"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport CustomProgressBar from \"./card/progress\";\n\nexport function NewsComponent(props) {\n  const [news, setNews] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  const extractTextFromHTML = (html) => {\n    const div = document.createElement('div');\n    div.innerHTML = html;\n    return div.textContent || div.innerText || '';\n  };\n\n  const scrapeInfoQ = async () => {\n    try {\n      const proxyUrl = 'https://api.allorigins.win/raw?url=';\n      const response = await axios.get(`${proxyUrl}${encodeURIComponent('https://www.infoq.com/')}`);\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(response.data, 'text/html');\n      \n      // InfoQ uses .cards li elements for their news items\n      const articles = Array.from(doc.querySelectorAll('.cards li, .card__content, article'));\n      \n      return articles.map((article, index) => {\n        // Look for title links in InfoQ's structure\n        const titleLinkElement = article.querySelector('.card__title a, h4 a, h5 a') || \n                                article.querySelector('a[href*=\"/news/\"], a[href*=\"/articles/\"], a[href*=\"/presentations/\"]');\n        \n        const title = titleLinkElement?.textContent?.trim() || `InfoQ Article ${index + 1}`;\n        \n        // Try to find description/excerpt from InfoQ\n        const descElement = article.querySelector('.card__excerpt, .card__description, p, .summary, .excerpt');\n        const description = descElement?.textContent?.trim() || '';\n        \n        let link = null;\n        \n        if (titleLinkElement) {\n          // Get the original href attribute to avoid browser resolution\n          const originalHref = titleLinkElement.getAttribute('href');\n          \n          if (originalHref) {\n            if (originalHref.startsWith('/')) {\n              // Relative URL like \"/news/2025/...\"\n              link = `https://www.infoq.com${originalHref}`;\n            } else if (originalHref.startsWith('http')) {\n              // Absolute URL - check if it needs domain correction\n              if (originalHref.includes('localhost')) {\n                const url = new URL(originalHref);\n                link = `https://www.infoq.com${url.pathname}`;\n              } else {\n                link = originalHref;\n              }\n            } else {\n              // Other relative URLs\n              link = `https://www.infoq.com/${originalHref}`;\n            }\n          }\n        }\n        \n        if (!link) {\n          return null; // Skip articles without valid links\n        }\n        \n        return {\n          title: title.substring(0, 150),\n          description: description.substring(0, 250),\n          url: link,\n          published: new Date().toISOString(),\n          source: 'InfoQ',\n          author: 'InfoQ Team'\n        };\n      }).filter(article => article && article.title.length > 10 && article.url !== 'https://www.infoq.com/' && !article.url.includes('undefined'));\n    } catch (error) {\n      console.error('Error scraping InfoQ:', error);\n      return [];\n    }\n  };\n\n  const scrapeTechCrunch = async () => {\n    try {\n      const proxyUrl = 'https://api.allorigins.win/raw?url=';\n      const response = await axios.get(`${proxyUrl}${encodeURIComponent('https://techcrunch.com/')}`);\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(response.data, 'text/html');\n      \n      // Try multiple selectors for TechCrunch articles\n      const articles = Array.from(doc.querySelectorAll('article, .post-block, .river-block, h2, h3, h1'));\n      \n      return articles.map((article, index) => {\n        let titleLinkElement = null;\n        let title = '';\n        \n        // Check if this is a heading element that might contain a link\n        if (article.tagName && ['H1', 'H2', 'H3'].includes(article.tagName)) {\n          titleLinkElement = article.querySelector('a') || article.parentElement?.querySelector('a');\n          title = titleLinkElement?.textContent?.trim() || article.textContent?.trim();\n        } else {\n          // Check for title links in article structure\n          titleLinkElement = article.querySelector('h2 a, h3 a, h1 a, .post-title a, .entry-title a') ||\n                           article.querySelector('a[href*=\"/20\"], a[href*=\"techcrunch.com/20\"]');\n          title = titleLinkElement?.textContent?.trim();\n        }\n        \n        if (!title || title.length < 10) {\n          return null;\n        }\n        \n        // Try to find description/excerpt from TechCrunch\n        const descElement = article.querySelector('.excerpt, .summary, .post-excerpt, p, .content');\n        const description = descElement?.textContent?.trim() || '';\n        \n        let link = null;\n        \n        if (titleLinkElement) {\n          // Get the original href attribute to avoid browser resolution\n          const originalHref = titleLinkElement.getAttribute('href');\n          \n          if (originalHref) {\n            if (originalHref.startsWith('/')) {\n              // Relative URL\n              link = `https://techcrunch.com${originalHref}`;\n            } else if (originalHref.startsWith('http')) {\n              // Absolute URL - check if it needs domain correction\n              if (originalHref.includes('localhost')) {\n                const url = new URL(originalHref);\n                link = `https://techcrunch.com${url.pathname}`;\n              } else {\n                link = originalHref;\n              }\n            } else {\n              // Other relative URLs\n              link = `https://techcrunch.com/${originalHref}`;\n            }\n          }\n        }\n        \n        if (!link) {\n          return null; // Skip articles without valid links\n        }\n        \n        return {\n          title: title.substring(0, 150),\n          description: description.substring(0, 250),\n          url: link,\n          published: new Date().toISOString(),\n          source: 'TechCrunch',\n          author: 'TechCrunch Team'\n        };\n      }).filter(article => article && article.title.length > 10 && article.url !== 'https://techcrunch.com/' && !article.url.includes('undefined'));\n    } catch (error) {\n      console.error('Error scraping TechCrunch:', error);\n      return [];\n    }\n  };\n\n\n  const scrapeArticleDescription = async (articleUrl, source) => {\n    try {\n      console.log(`Scraping description from: ${articleUrl}`);\n      const proxyUrl = 'https://api.allorigins.win/raw?url=';\n      const response = await axios.get(`${proxyUrl}${encodeURIComponent(articleUrl)}`);\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(response.data, 'text/html');\n      \n      let description = '';\n      \n      if (source === 'InfoQ') {\n        // InfoQ-specific selectors\n        const infoqSelectors = [\n          'meta[name=\"description\"]',\n          'meta[property=\"og:description\"]',\n          '.article__summary',\n          '.article__content p:first-of-type',\n          '.content p:first-of-type',\n          'article p:first-of-type',\n          '.article-body p:first-of-type'\n        ];\n        \n        for (const selector of infoqSelectors) {\n          const element = doc.querySelector(selector);\n          if (element) {\n            let text = '';\n            if (element.tagName === 'META') {\n              text = element.getAttribute('content') || '';\n            } else {\n              text = element.textContent || '';\n            }\n            \n            if (text && text.length > 50 && !text.includes('InfoQ') && !text.includes('Latest technology')) {\n              description = text.trim().substring(0, 300);\n              break;\n            }\n          }\n        }\n      } else if (source === 'TechCrunch') {\n        // TechCrunch-specific selectors\n        const techcrunchSelectors = [\n          'meta[name=\"description\"]',\n          'meta[property=\"og:description\"]',\n          '.article-content p:first-of-type',\n          '.post-content p:first-of-type',\n          '.entry-content p:first-of-type',\n          '.wp-block-post-content p:first-of-type',\n          'article .entry-content p:first-of-type'\n        ];\n        \n        for (const selector of techcrunchSelectors) {\n          const element = doc.querySelector(selector);\n          if (element) {\n            let text = '';\n            if (element.tagName === 'META') {\n              text = element.getAttribute('content') || '';\n            } else {\n              text = element.textContent || '';\n            }\n            \n            if (text && text.length > 50 && !text.includes('TechCrunch') && !text.includes('Breaking technology')) {\n              description = text.trim().substring(0, 300);\n              break;\n            }\n          }\n        }\n      }\n      \n      console.log(`Found description: ${description.substring(0, 100)}...`);\n      return description;\n      \n    } catch (error) {\n      console.error(`Error scraping article description from ${articleUrl}:`, error);\n      return '';\n    }\n  };\n\n  useEffect(() => {\n    async function fetchNews() {\n      try {\n        setLoading(true);\n        \n        const [infoqNews, techcrunchNews] = await Promise.allSettled([\n          scrapeInfoQ(),\n          scrapeTechCrunch()\n        ]);\n  \n        const infoqArticles = infoqNews.status === 'fulfilled' ? infoqNews.value : [];\n        const techcrunchArticles = techcrunchNews.status === 'fulfilled' ? techcrunchNews.value : [];\n        \n        const allNews = [...infoqArticles.slice(0,25), ...techcrunchArticles.slice(0,25)];\n        \n        if (allNews.length > 0) {\n          const shuffledNews = allNews.sort(() => 0.5 - Math.random());\n          setNews(shuffledNews);\n          setError(false);\n          \n          // Fetch descriptions for articles that need them - in parallel\n          setTimeout(async () => {\n            // Identify articles that need description fetching\n            const articlesToUpdate = shuffledNews.filter(\n              article => !article.description || article.description.length < 20\n            );\n            \n            console.log(`Fetching descriptions for ${articlesToUpdate.length} articles`);\n            \n            // Fetch all descriptions in parallel\n            const descriptionPromises = articlesToUpdate.map(article => \n              scrapeArticleDescription(article.url, article.source)\n                .then(description => ({\n                  ...article,\n                  description: description || article.description\n                }))\n                .catch(error => {\n                  console.error(`Failed to fetch description for ${article.title}:`, error);\n                  return article; // Return original article if description fetch fails\n                })\n            );\n            \n            const updatedArticles = await Promise.allSettled(descriptionPromises);\n            \n            // Create a map of updated articles by URL for easy lookup\n            const updatedArticlesMap = new Map();\n            updatedArticles.forEach(result => {\n              if (result.status === 'fulfilled') {\n                updatedArticlesMap.set(result.value.url, result.value);\n              }\n            });\n            \n            // Merge updated articles with original news\n            const finalNews = shuffledNews.map(article => \n              updatedArticlesMap.get(article.url) || article\n            );\n            \n            setNews(finalNews);\n          }, 100);\n          \n        } else {\n          setNews([]);\n          setError(true);\n        }\n        \n      } catch (error) {\n        console.error('Error fetching news:', error);\n        setNews([]);\n        setError(true);\n      } finally {\n        setLoading(false);\n      }\n    }\n  \n    fetchNews();\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-bg-primary text-text-primary p-0 m-0\">\n      <div className=\"max-w-6xl mx-auto pt-8 px-4\">\n        <div className=\"w-full\">\n          <h2 className=\"text-4xl font-bold text-center mb-4 text-text-primary\">Latest Tech News</h2>\n          <p className=\"text-center mb-8 text-text-secondary\">\n            Live updates from InfoQ and TechCrunch - Software Engineering, Startups & Tech Trends\n          </p>\n        \n          {loading ? (\n            <div className=\"text-center\">\n              <div className=\"spinner-glass w-12 h-12 mx-auto mb-6\"></div>\n              <p className=\"text-text-secondary\">Scraping latest news from InfoQ and TechCrunch...</p>\n              <div className=\"w-full max-w-md mx-auto mb-6 h-2.5 bg-surface-glass rounded-full overflow-hidden\">\n                <CustomProgressBar />\n              </div>\n            </div>\n          ) : error && news.length === 0 ? (\n            <div className=\"text-center\">\n              <div className=\"alert-glass border-yellow-500 bg-yellow-500/10 max-w-2xl mx-auto\">\n                <h5 className=\"text-xl font-semibold mb-3 text-text-primary\">Unable to fetch news</h5>\n                <p className=\"text-text-secondary mb-3\">\n                  Could not scrape articles from InfoQ and TechCrunch at this time. \n                  This may be due to CORS restrictions or site structure changes.\n                </p>\n                <small className=\"text-text-muted\">\n                  Please try refreshing the page or check back later.\n                </small>\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-6\">\n              {news.map((article, index) => (\n                <div key={index} className=\"w-full\">\n                  <div className=\"card-glass h-full\">\n                    <div className=\"p-6\">\n                      <div className=\"flex justify-between items-start mb-4\">\n                        <div className=\"flex items-center space-x-3\">\n                          <span \n                            className={`px-3 py-1 rounded-full text-sm font-semibold ${\n                              article.source === 'InfoQ' \n                                ? 'bg-blue-500/20 text-blue-400 border border-blue-500/30' \n                                : 'bg-green-500/20 text-green-400 border border-green-500/30'\n                            }`}\n                          >\n                            {article.source}\n                          </span>\n                          <span className=\"text-text-muted text-sm\">\n                            {article.author} • {new Date(article.published).toLocaleDateString()}\n                          </span>\n                        </div>\n                      </div>\n                      <h3 className=\"text-xl font-semibold mb-4 text-left\">\n                        <a \n                          href={article.url} \n                          target=\"_blank\" \n                          rel=\"noopener noreferrer\"\n                          className=\"text-text-primary hover:text-accent-primary transition-colors duration-300 no-underline\"\n                        >\n                          {article.title}\n                        </a>\n                      </h3>\n                      {article.description && article.description.length > 20 && (\n                        <p className=\"text-left text-text-secondary text-sm leading-relaxed\">\n                          {article.description}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n          \n          <div className=\"text-center mt-12\">\n            <small className=\"text-text-muted\">\n              News automatically scraped from{' '}\n              <a \n                href=\"https://www.infoq.com/\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\" \n                className=\"text-accent-primary hover:text-accent-secondary transition-colors duration-300\"\n              >\n                InfoQ\n              </a>{' '}\n              and{' '}\n              <a \n                href=\"https://techcrunch.com/\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\" \n                className=\"text-accent-primary hover:text-accent-secondary transition-colors duration-300\"\n              >\n                TechCrunch\n              </a>\n            </small>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/recro/Documents/code/code/portfolioFrontend/src/components/SSOCallback.js",[],"/Users/recro/Documents/code/code/portfolioFrontend/src/components/InstagramImageFetcher.js",["112"],"import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { URL } from \"../config\";\n\nexport function InstagramImageFetcher() {\n  const [postUrl, setPostUrl] = useState(\"\");\n  const [images, setImages] = useState([]);\n  const [imageCount, setImageCount] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [success, setSuccess] = useState(false);\n\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(\"\");\n    setSuccess(false);\n    setImages([]);\n    setImageCount(0);\n\n    if (!postUrl.trim()) {\n      setError(\"Please enter a valid Instagram post URL\");\n      setLoading(false);\n      return;\n    }\n\n    const token = localStorage.getItem(\"token\");\n    if (!token) {\n      setError(\"You must be logged in to use this feature\");\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const response = await axios.get(`${URL}post/instagram-proxy`, {\n        params: { url: postUrl },\n        headers: {\n          Authorization: token\n        }\n      });\n\n      if (response.data.images && response.data.images.length > 0) {\n        setImages(response.data.images);\n        setImageCount(response.data.count || response.data.images.length);\n        setSuccess(true);\n      } else {\n        setError(\"No images found in the Instagram post\");\n      }\n    } catch (err) {\n      console.error(\"Error fetching Instagram post:\", err);\n      if (err.response?.status === 401) {\n        setError(\"Authentication failed. Please log in again.\");\n      } else if (err.response?.data?.message) {\n        setError(err.response.data.message);\n      } else {\n        setError(\"An error occurred while fetching the Instagram post\");\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDownload = (imageUrl, index = 0) => {\n    if (imageUrl) {\n      const link = document.createElement(\"a\");\n      link.href = imageUrl;\n      link.download = `instagram-image-${index + 1}-${Date.now()}.jpg`;\n      link.target = \"_blank\";\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  const handleDownloadAll = () => {\n    images.forEach((imageUrl, index) => {\n      setTimeout(() => handleDownload(imageUrl, index), index * 500);\n    });\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto px-4 mt-8\">\n      <div className=\"glass-card\">\n        <div className=\"p-6 border-b border-white/20\">\n          <h3 className=\"text-xl font-bold text-white mb-2\">Instagram Image Fetcher</h3>\n          <p className=\"text-text-secondary mb-0\">\n            Enter an Instagram post URL to fetch and download the main image\n          </p>\n        </div>\n        <div className=\"p-6\">\n          <form onSubmit={handleSubmit}>\n            <div className=\"mb-6\">\n              <label className=\"block text-sm font-medium text-text-secondary mb-2\">\n                Instagram Post URL\n              </label>\n              <input\n                type=\"url\"\n                className=\"input-glass w-full\"\n                placeholder=\"https://www.instagram.com/p/ABC123/\"\n                value={postUrl}\n                onChange={(e) => setPostUrl(e.target.value)}\n                disabled={loading}\n              />\n              <p className=\"text-text-secondary text-sm mt-2\">\n                Enter the full URL of the Instagram post\n              </p>\n            </div>\n            \n            <button \n              type=\"submit\" \n              disabled={loading}\n              className=\"btn-primary-glass mb-6\"\n            >\n              {loading ? (\n                <>\n                  <div className=\"spinner-glass w-4 h-4 mr-2 inline-block\"></div>\n                  Fetching...\n                </>\n              ) : (\n                \"Fetch Image\"\n              )}\n            </button>\n          </form>\n\n          {error && (\n            <div className=\"alert-glass alert-danger mt-6\">\n              {error}\n            </div>\n          )}\n\n          {success && images.length > 0 && (\n            <div className=\"mt-8\">\n              <div className=\"alert-glass alert-success\">\n                {imageCount === 1 ? '1 image' : `${imageCount} images`} fetched successfully!\n              </div>\n              \n              {images.length > 1 && (\n                <div className=\"mb-6 text-center\">\n                  <button \n                    className=\"btn-primary-glass\"\n                    onClick={handleDownloadAll}\n                  >\n                    Download All Images\n                  </button>\n                </div>\n              )}\n              \n              {images.map((imageUrl, index) => (\n                <div key={index} className={`glass-card ${index > 0 ? \"mt-6\" : \"\"}`}>\n                  <div className=\"p-4 border-b border-white/20 flex justify-between items-center\">\n                    <span className=\"text-white\">Image {index + 1}{images.length > 1 ? ` of ${imageCount}` : ''}</span>\n                    <button \n                      className=\"btn-secondary-glass text-sm px-3 py-1\"\n                      onClick={() => handleDownload(imageUrl, index)}\n                    >\n                      Download\n                    </button>\n                  </div>\n                  <div className=\"p-6 text-center\">\n                    <img\n                      src={imageUrl}\n                      alt={`Instagram post image ${index + 1}`}\n                      className=\"max-w-full h-auto max-h-96 rounded-lg\"\n                      onError={() => setError(`Failed to load image ${index + 1}`)}\n                    />\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","/Users/recro/Documents/code/code/portfolioFrontend/src/redux/store.js",[],"/Users/recro/Documents/code/code/portfolioFrontend/src/redux/actions.js",[],"/Users/recro/Documents/code/code/portfolioFrontend/src/config.js",[],"/Users/recro/Documents/code/code/portfolioFrontend/src/components/SSOLogin.js",[],"/Users/recro/Documents/code/code/portfolioFrontend/src/redux/reducer.js",[],"/Users/recro/Documents/code/code/portfolioFrontend/src/components/forms/LoginForm.js",["113"],"import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { useFormik } from \"formik\";\nimport { useHistory } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { initAuth } from \"../../redux/actions\";\nimport { URL } from \"../../config\";\n\nexport function Loginform(props) {\n  var [loginSuccess, setLoginSuccess] = useState(false);\n  var [authFailed, setAuthFailed] = useState(false);\n  var [validationError, setValidationError] = useState(null);\n  let history = useHistory();\n  let dispatch = useDispatch();\n\n  const formik = useFormik({\n    initialValues: {\n      email: \"\",\n      password: \"\",\n    },\n    onSubmit: (values) => {\n      axios\n        .post(`${URL}user/login`, values)\n        .then((res) => {\n          // SUCCESS\n          console.log(\"res: \" + JSON.stringify(res));\n          if (res.data.code === \"Loggedin\") {\n            localStorage.setItem(\"token\", res.data.token);\n            setLoginSuccess(true);\n            dispatch(initAuth(res.data.user));\n            history.push(\"/warehouse\");\n          }\n        })\n        .catch((error) => {\n          console.log(\"Error log: \" + error);\n          //   console.log(\"Error log: \"+ JSON.stringify(error.response))\n          // console.log(\"Error log: \"+ error.response.data.code)\n\n          //VALIDATION ERROR\n          if (error.response.data.code === \"validationFalse\") {\n            // setValidationError(res.data.message)\n            setValidationError(true);\n          }\n          // FAILED\n          if (\n            error.response.data === \"Not valid password\" ||\n            error.response.data === \"Email do not exists\"\n          ) {\n            setAuthFailed(true);\n          }\n        });\n      // alert(JSON.stringify(values));\n    },\n  });\n  if (loginSuccess) {\n    return (\n      <div className=\"glass-card max-w-md mx-auto mt-8\">\n        <h2 className=\"text-2xl font-bold text-center text-text-primary\">Login Successful</h2>\n      </div>\n    );\n  } else\n    return (\n      <div className=\"max-w-md mx-auto mt-8\">\n        <form className=\"glass-card\" onSubmit={formik.handleSubmit}>\n          <div className=\"mb-6\">\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-text-secondary mb-2\">\n              Email address\n            </label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              placeholder=\"Enter email\"\n              onChange={formik.handleChange}\n              value={formik.values.email}\n              className=\"input-glass w-full\"\n            />\n            <p className=\"text-text-muted text-sm mt-2\">\n              Your information will be kept confidential.\n            </p>\n          </div>\n\n          <div className=\"mb-6\">\n            <label htmlFor=\"password\" className=\"block text-sm font-medium text-text-secondary mb-2\">\n              Password\n            </label>\n            <input\n              type=\"password\"\n              id=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n              onChange={formik.handleChange}\n              value={formik.values.password}\n              className=\"input-glass w-full\"\n            />\n            {authFailed && (\n              <p className=\"text-red-400 text-sm mt-2\">\n                Email or password is wrong\n              </p>\n            )}\n            {validationError && (\n              <p className=\"text-red-400 text-sm mt-2\">\n                Must be valid Email and password should be min 8 characters long\n              </p>\n            )}\n          </div>\n          \n          <button type=\"submit\" className=\"btn-primary-glass w-full\">\n            Login\n          </button>\n        </form>\n      </div>\n    );\n}\n","/Users/recro/Documents/code/code/portfolioFrontend/src/components/forms/SignupForm.js",["114"],"import React, { useState } from 'react'\nimport { useFormik } from 'formik';\nimport axios from \"axios\";\nimport {URL} from '../../config'\n\n\nexport function SignupForm(props) {\n    var [emailAlreadyExists, setemailAlreadyExists] = useState(false)\n    var [signupSuccess, setSignupSuccess] = useState(false)\n    var [passwordValidationError, setPasswordValidationError] = useState(null)\n    const [otpSentSuccessfully, setOtpSentSuccessfully] = useState(false)\n\n        // Pass the useFormik() hook initial form values and a submit function that will\n        // be called when the form is submitted\n        const formik = useFormik({\n          initialValues: {\n                email: '',\n                name:'',\n                password:'',\n                otp:''\n          },\n          onSubmit: values => {\n            axios.post(`${URL}user/signup`, values)\n            .then(res => {\n                if(res.data === \"Email already exists\"){\n                    setemailAlreadyExists(true)\n                }\n\n                //USERCREATED SUCCESS\n                if(res.data.code === \"userCreated\"){\n                    setSignupSuccess(true)\n                    // alert(\"signup success\")\n                }\n\n                //validationFalse\n                if(res.data.code === \"validationFalse\"){\n                    // setValidationError(res.data.message)\n                    let msg = res.data.message\n                    let result = msg.search(\"password\")\n                    if (result) setPasswordValidationError(msg)\n                }\n                console.log(res);\n                // console.log(res.data);\n            })\n            .catch(error =>{\n                console.log(error)\n            })\n            // alert(JSON.stringify(values));\n          },\n        });\n        const sendOTP = ()=>{\n            let email = formik.values.email\n            console.log(\"Email provided to send otp \"+email)\n            axios.post(`${URL}user/otpsend`, {email})\n            .then(res=>{\n                console.log(\"Email Sent response 1 \"+JSON.stringify(res))\n                if(res.data.code == \"otpSent\"){\n                    console.log(\"Email Sent response 2 \"+res)\n                    setOtpSentSuccessfully(true)\n                    alert(\"OTP Sent Successfully to your Email\")\n                }\n            })\n        }\n    if(signupSuccess) return (\n        <div className=\"glass-card max-w-md mx-auto mt-8\">\n            <h2 className=\"text-2xl font-bold text-center text-text-primary mb-4\">Signup Successful</h2>\n            <h3 className=\"text-lg text-center text-text-secondary\">Please try to login</h3>\n        </div>\n        )\n        else return (\n        <div className=\"max-w-md mx-auto mt-8\">\n            <form className=\"glass-card\" onSubmit={formik.handleSubmit}>\n                <div className=\"mb-6\">\n                    <label htmlFor=\"name\" className=\"block text-sm font-medium text-text-secondary mb-2\">Name</label>\n                    <input \n                        type=\"text\" \n                        id=\"name\"\n                        name=\"name\" \n                        placeholder=\"Enter name\" \n                        onChange={formik.handleChange} \n                        value={formik.values.name}\n                        className=\"input-glass w-full\"\n                    />\n                </div>\n                \n                <div className=\"mb-6\">\n                    <label htmlFor=\"email\" className=\"block text-sm font-medium text-text-secondary mb-2\">Email address</label>\n                    <input \n                        type=\"email\" \n                        id=\"email\"\n                        placeholder=\"Enter email\" \n                        name=\"email\" \n                        readOnly={otpSentSuccessfully} \n                        onChange={formik.handleChange} \n                        value={formik.values.email}\n                        className=\"input-glass w-full\"\n                    />\n                    {emailAlreadyExists && (\n                        <p className=\"text-red-400 text-sm mt-2\">\n                            This email already exists, try with another email\n                        </p>\n                    )}\n                    <div className=\"mt-3\">\n                        {!otpSentSuccessfully && (\n                            <button \n                                type=\"button\"\n                                onClick={sendOTP} \n                                className=\"btn-glass text-sm\"\n                            >\n                                Send OTP to my email\n                            </button>\n                        )}\n                    </div>\n                </div>\n                \n                <div className=\"mb-6\">\n                    <label htmlFor=\"otp\" className=\"block text-sm font-medium text-text-secondary mb-2\">OTP</label>\n                    <input \n                        type=\"text\" \n                        id=\"otp\"\n                        name=\"otp\" \n                        placeholder=\"Enter otp\" \n                        onChange={formik.handleChange} \n                        value={formik.values.otp}\n                        className=\"input-glass w-full\"\n                    />\n                </div>\n\n                <div className=\"mb-6\">\n                    <label htmlFor=\"password\" className=\"block text-sm font-medium text-text-secondary mb-2\">Password</label>\n                    <input \n                        type=\"password\" \n                        id=\"password\"\n                        placeholder=\"Password\" \n                        name=\"password\" \n                        onChange={formik.handleChange} \n                        value={formik.values.password}\n                        className=\"input-glass w-full\"\n                    />\n                    {passwordValidationError && (\n                        <p className=\"text-red-400 text-sm mt-2\">\n                            Error: {passwordValidationError}\n                        </p>\n                    )}\n                </div>\n                \n                <button type=\"submit\" className=\"btn-primary-glass w-full\">\n                    Signup\n                </button>\n            </form>\n        </div>\n    )\n}\n","/Users/recro/Documents/code/code/portfolioFrontend/src/services/workos.js",[],"/Users/recro/Documents/code/code/portfolioFrontend/src/components/card/progress.js",[],"/Users/recro/Documents/code/code/portfolioFrontend/src/redux/actionTypes.js",[],{"ruleId":"115","severity":1,"message":"116","line":2,"column":23,"nodeType":"117","messageId":"118","endLine":2,"endColumn":34},{"ruleId":"115","severity":1,"message":"119","line":36,"column":9,"nodeType":"117","messageId":"118","endLine":36,"endColumn":15},{"ruleId":"115","severity":1,"message":"120","line":39,"column":8,"nodeType":"117","messageId":"118","endLine":39,"endColumn":19},{"ruleId":"115","severity":1,"message":"121","line":40,"column":10,"nodeType":"117","messageId":"118","endLine":40,"endColumn":19},{"ruleId":"115","severity":1,"message":"122","line":40,"column":21,"nodeType":"117","messageId":"118","endLine":40,"endColumn":33},{"ruleId":"115","severity":1,"message":"123","line":1,"column":17,"nodeType":"117","messageId":"118","endLine":1,"endColumn":26},{"ruleId":"115","severity":1,"message":"124","line":4,"column":19,"nodeType":"117","messageId":"118","endLine":4,"endColumn":27},{"ruleId":"115","severity":1,"message":"125","line":5,"column":8,"nodeType":"117","messageId":"118","endLine":5,"endColumn":13},{"ruleId":"115","severity":1,"message":"126","line":2,"column":10,"nodeType":"117","messageId":"118","endLine":2,"endColumn":14},{"ruleId":"115","severity":1,"message":"127","line":10,"column":9,"nodeType":"117","messageId":"118","endLine":10,"endColumn":28},{"ruleId":"128","severity":1,"message":"129","line":161,"column":21,"nodeType":"130","endLine":166,"endColumn":23},{"ruleId":"115","severity":1,"message":"131","line":5,"column":10,"nodeType":"117","messageId":"118","endLine":5,"endColumn":21},{"ruleId":"132","severity":1,"message":"133","line":57,"column":34,"nodeType":"134","messageId":"135","endLine":57,"endColumn":36},"no-unused-vars","'useDispatch' is defined but never used.","Identifier","unusedVar","'userId' is assigned a value but never used.","'saveSuccess' is assigned a value but never used.","'savedData' is assigned a value but never used.","'setSavedData' is assigned a value but never used.","'useEffect' is defined but never used.","'initAuth' is defined but never used.","'axios' is defined but never used.","'Link' is defined but never used.","'extractTextFromHTML' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'useSelector' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]